import java.util.Arrays;

class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        // Sort the potions array for binary search
        Arrays.sort(potions);
        int[] result = new int[spells.length];
        int n = potions.length;
        
        for (int i = 0; i < spells.length; i++) {
            int spell = spells[i];
            // If spell is 0, it cannot form a successful pair
            if (spell == 0) {
                result[i] = 0;
                continue;
            }
            // Calculate the minimum potion strength required
            long minPotion = (success + spell - 1) / spell; // Equivalent to Math.ceil(success / spell)
            
            // Binary search to find the first valid potion
            int left = 0, right = n - 1;
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (potions[mid] >= minPotion) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            // All potions from 'left' to the end of the array are successful
            result[i] = n - left;
        }
        
        return result;
    }
}
