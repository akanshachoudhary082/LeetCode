/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head; // No reordering needed for empty list or single node
        }

        ListNode odd = head; // Start with the first node (odd)
        ListNode even = head.next; // Second node (even)
        ListNode evenHead = even; // Keep the start of even list

        while (even != null && even.next != null) {
            odd.next = even.next; // Link odd to the next odd node
            odd = odd.next; // Move odd pointer forward
            even.next = odd.next; // Link even to the next even node
            even = even.next; // Move even pointer forward
        }

        odd.next = evenHead; // Connect the odd list to the even list

        return head; // Return the head of the reordered list
    }
}
